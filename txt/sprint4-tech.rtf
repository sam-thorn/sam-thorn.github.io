{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red94\green176\blue32;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c43067\c72927\c16222;\cssrgb\c0\c1\c1;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10300\viewh12780\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Sprint 4 Tech
\f1\b0 \
\
\

\f0\b Code Readability
\f1\b0 \
\

\f0\b \cf2 Indentation 
\f1\b0 \cf3 \
\
Don\'92t\
- Have everything on one line. It is hard to read where code ends and content begins. \
- No indentation. It is hard to differentiate code and content. \
- Indent inline elements. Treat them like content.\
\
Do\
- Have tags at same level, so you can see that they are closed.\
- Indent content so it is easy to differentiate with tags.\
- Nest tags and content.\
\
Exceptions:\
- We don\'92t indent h1 tags and other headers because they are short\
- We don\'92t indent <title> and most other items inside <head> because they\'92re short.\
- We don\'92t usually indent <li>.\
- We don\'92t need to indent <head> and <body> inside the <html> tag even though they are children of <html>. This is because they are always the only children of html so this never changes, and you save yourself one level of nesting indentation. \
\
Spaces or Tabs?\
Typical tab spacing seems to be 5 to 9 spaces. \
WebSanity considers that 8 is far too many, 4 is acceptable but a bit too large, and 2 is just right. \
You can change the settings in your document editor to how many spaces are entered when you press TAB.\
I have installed the Prettier extension in VS Code and this appears to use 2 spaces.\cf0 \
\
\

\f0\b \cf2 Why Shorter Methods are Better
\f1\b0 \cf3 \
\
Longer methods are more likely to need to change when the application changes. \
\
There is likely a correlation between method length (number of statements) and the number of unit test cases required to validate the method. Breaking a large method into smaller independent methods means that you are able to test parts of your application independently of one another and it is likely to take fewer tests. This in turn is likely to reduce the amount of time spent testing to validate a method. \
\
There is likely a strong correlation between method length and the number of unknown future requirements that demand that method change. So the investment made in developing and testing a small method will be repaid numerous times because there are fewer reasons to break it open to undo what has been previously done. \
\
Longer methods are more likely to duplicate knowledge or logic found elsewhere in the same codebase. \
\
Clarity - A method that does very little is likely to require less mental gymnastics to fully understand compared with a longer method. You are less likely to need to spend time trying to understand it each time you encounter it. \
\
\

\f0\b \cf2 Qualities of Clean Code
\f1\b0 \cf3 \
\
How can you be sure your code is clean? \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Bad code does too much. Clean code is focused - \cf3 \
Each class, method or any other entity should remain undisturbed. It should conform to Single Responsibility Principle (SRP). You should be making sure that if you can think of the reason for changing a class you should not be able to come up with more than one.\
https://en.wikipedia.org/wiki/Single-responsibility_principle\
\
\'91The single-responsibility principle is a computer programming principle that states that every class in a computer program should have responsibility over a single part of that program\'92s functionality, which it should encapsulate. \
\
\cf2 The language you wrote your code with should look like it was made for the problem\cf3 \
Variable names, object names, for example. \
\
Your code should not be redundant. \
It should comply with the DRY rule. When the DRY principle has been successfully applied, the modification of any single element of a system doesn\'92t require change in any other logically unrelated elements. \
\
\cf2 Reading your code should be pleasant. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 It should feel like it was made to be read by any developer easily without having to spend hours digging into it to try and understand it. To achieve this you should try to comply with the following principles:\
- KISS - Keep It Simple, Stupid!\
- YAGNI - You Ain\'92t Gonna Need It\cf2 \
\
Your code can be easily extended by any other developer. \
\cf3 You should write your code for other developers. What goes around comes around. \cf2 \
\
It should have minimal dependencies. \
\cf3 The more dependencies it has, the harder it is to maintain and change in the future. \cf2 \
\
Smaller is better.\
\cf3 Code should be minimal. Both classes and methods should be short, preferably just a few lines of code. \
It should be well divided. The better you divide your code the easier it becomes to read. \cf2 \
\
It should have unit and acceptance tests. \
\cf3 We need to write tests to ensure that our code complies with requirements. \
Code without tests is not clean. \cf2 \
\
It should be expressive. \
\cf3 Expressiveness of code means that it has meaningful names. These names should express their intention. The shouldn\'92t mislead. They should be distinctive. \cf2 \
\
\
So what is the definition of clean code? \cf3 \
Clean code is a code that is written by someone who cares. \
It is written by someone who has treated it as an art and paid attention to all details. \
\
\

\f0\b \cf2 Testing
\f1\b0 \cf3 \
\
Testing is how we know that code works. It tells us our code is reliable, isn\'92t going to break, and is doing what we want it to. It is often said that if code isn\'92t tested, it isn\'92t yet complete.\
\
Two concepts we will encounter a lot are Unit Testing and Test Driven Development.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Unit Testing\cf3 \
Unit testing describes the testing of the small individual functions that make up a larger programme. We test these small units of code to make sure each part is doing what we expect. \
\
Unit testing is not concerned with whether the whole project works as expected or not, rather it focuses on each of the functions within it. When we confidently understand the smaller pieces of code are working correctly, we can build the larger portions on top of them with this in mind. \
\
When we change something in our code, unit testing means that we do not need to manually test our large project to find out if we broke anything. If something does break, the tests will tell us exactly where. \
\
\cf2 Test Driven Development (TDD)\cf3 \
\
TDD is a way of doing code development as a whole. It involves starting with the big picture and writing your tests before you write your code. \
\
This means you have to work out what you intend the code to do and what smaller things need to happen in order to achieve this before you begin writing it. Tests are written that match your intent for the project.\
\
With a TDD approach you don\'92t need to have written tests for the whole application before you start building, but you would typically write the test/s for the next feature or function prior to writing the code.\
\
TDD focuses on passing tests and getting code that works. We would usually then go back and refactor the code to make it more concise and readable. \
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf2 Pseudocode
\f1\b0 \cf3 \
\
Pseudocode is a coding specific and extremely useful tool to help you think through your code. It is not actual code, but rather comments that tell you how the code will eventually look. It is informal, plainly written steps that form the rough draft or outline of your code. \
\
Pseudocoding involves taking a little time to break down your plan into small steps before you get into writing the code. This means that you don\'92t have to worry about making the whole thing work at once, but can instead focus on just coding one step at a time. This can be useful for helping to break down a complicated problem, or if one developer needs to leave instructions for another.\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Problem Solving\cf3 \
\
IBM\'92s Knowledge Center Support notes you can approach a problem by asking yourself several basic questions:\
\
- What are the symptoms of the problem?\
- Where does the problem occur?\
- When does the problem occur?\
- Under which conditions does the problem occur?\
- Can the problem be reproduced?\
\
\
\cf2 Console.log( )\cf3 \
\
The DOM console.log( ) method writes a message to the console and is useful for testing the output of your code to display an anticipated result. We can also use it for printing strings and other variables so we can see their values. \
\
For example, we can create an event listener that checks if a particular button is clicked on. When the onClick event is triggered, a message confirming that our function works appears in the console.  \
\
The console view must be visible in order to see the output. \
\
Example: Write an object to the console:\
\
-  var myObj = \{ key: \'93value \'94 \} ;\
	console.log(myObj) ;\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf4 Tech Blog - 
\f1\b0 \cf3 \
\
\cf4 A time I got blocked on a simple problem:\cf3 \
\
During this week\'92s JavaScript exercises I was asked to write code to pass a number of tests of increasing difficulty. Working through an exercise on manipulating JavaScript objects, I was tasked with creating new objects and adding properties to new and existing objects; in this case a husband and wife: Terah and Adam. \
\
I got blocked when I was asked to make the new Terah object I had just created point back to the original Terah object that was in place at the start of the exercise. We were instructed not to alter this original object. \
\
The test said: \'93Terah\'92s spouses spouse property should refer back to the terah.\'94. What? OK, so Terah\'92s spouse is Adam. So Adam\'92s \'93spouse property should refer back to the terah\'94. What is \'93the terah\'94? This seemed like an instance of the test message not being particularly clear, which can be part of the problem solving process, however in this case I inferred that it meant the original Terah object. Wait, how do I do that? Both objects are spelt the same: \'91terah\'92. How do I get my code to point to one terah in particular? This stumped me for quite a while. \
\
I tried to think through the logic of what I was trying to achieve. I tested code in the Adam object (Terah\'92s spouse), I tested it below the Adam object. Neither of these worked. \
\
I then reached out to my Dev Academy cohort to see if anyone could offer any pointers. I received many helpful messages that really got me thinking about the logic of what I was trying to achieve - in particular with respect to how JavaScript was reading the code I had written. \
\
I was then able to pass the test and move on to the next one. It really was a simple problem, but I think sometimes it\'92s easy to get on the wrong track with your thinking and not be able to see other ways around or through. Given that part of this week\'92s focus was on problem solving, this was a great opportunity for me to practice my process. \
\
\
\cf4 A time I solved a problem in an elegant way:\cf3 \
\
One of the exercises I attempted this week was the classic programming exercise FizzBuzz. It asks the developer to write a program which prints out each number from 1-100; but for multiples of 3 print \'93Fizz\'94 instead of the number, for multiples of 5 print \'93Buzz\'94, and for multiples of both 3 and 5 print \'93FizzBuzz\'94.\
\
This exercise asked us to practice using if/else statements to replace the multiple with the correct word. For example, if the number is 6, change it to \'93Fizz\'94. \
\
As with all of this week\'92s exercises I got stuck. This time it was with how to use the operators \'91% - divisible by\'92, \'91== - equal to\'92 and \'91&& - and\'92. I was mostly able to solve these by doing internet searches and I also reached out to my coach for help on the correct \'91equal to\'92 operator to use. \
\
I was really happy with how I reached the solution for the \'93FizzBuzz\'94 portion of the challenge, where multiples of both 3 and 5 are altered. It was one of those moments where I thought out the steps of what I was trying to do and understood the logic of how it should work. I searched for and found out about the && operator and used it in my code and\'85it worked! Sort of. Using console log I could see that that portion of code was correct but my coach hinted that JavaScript might need to read the overall if/else statement in a different order so that all of the tests would pass. I reorganised my code and ran it. Success! \
\
I came up against many blocks this week that challenged my confidence in my understanding of the JavaScript material that we have covered so far. I felt I was getting tripped up easily, and that often even after using most of the problem solving techniques was not able to make any progress. Quite a frustrating affair. So it was nice to take a few little wins along the way and slowly (very slowly) feel like I was starting to grasp this material a bit better. I\'92m trying my best to embrace the process and am looking forward to the moments where all becomes clear. \
\
\
\cf4 How confident do I feel using each of the problem solving techniques and process:\cf3 \
\
Pseudocode:\
I tried using pseudocode on several occasions. I felt as though it was helpful for getting me thinking along the steps for what I was trying to achieve. However it was often incorrect and not overly helpful in terms of a final solution. I think with practice I\'92ll become better and it will become more useful to me.\
\
Trying something:\
I found I was often going to this method. Particularly if I thought my solution was pretty much there, but that I might have slightly incorrect syntax or my code could be ordered differently. \
\
Rubber ducky method:\
I didn\'92t use this method much. I didn\'92t find that speaking the problem out loud brought me much clarity. I\'92ll keep practicing it though. \
\
Reading error messages: \
I found these really useful. It would direct my attention to part of the code that wasn\'92t working correctly and I could address it. \
\
Console.logging:\
I wasn\'92t very confident with how to console.log my code before this week\'92s exercises so it was a great chance to practice and I find it a really useful tool to see what your code is producing.\
\
Googling:\
This was my go-to. Often it would confuse me further by turning up more complex solutions than I was ready for but with practice my questions will get better, and I noticed they did over the course of the week. \
\
Asking my peers and coaches for help:\
I tried to exhaust all other avenues of problem solving I could before reaching out to ask for help. For me it is easy not to do this as I tend to feel negative emotions about putting myself out there acknowledging that I can\'92t do something - so I am trying to practice remaining open to asking for help, as I think it is an extremely useful resource. It gives others a chance to reinforce what they know, and might help out other people who are struggling with the same thing. \
\
Improving my process with reflection:\
I wasn\'92t very good at taking the time to reflect on the wins and losses I had during the week. Something I can work on I think.\
\
\
\
\
\
\
\
\
}